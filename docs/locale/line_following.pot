# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder_PiCar-S package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder_PiCar-S \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 10:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../line_following.rst:2
msgid "Line Following"
msgstr ""

#: ../line_following.rst:5
msgid "How it works"
msgstr ""

#: ../line_following.rst:7
msgid "The line follower detects lines in the surrounding environment, and transfers the data to the processor. The processor analyzes the data, and sends a command to control the movement of front wheels and rear wheels."
msgstr ""

#: ../line_following.rst:13
msgid "Procedures"
msgstr ""

#: ../line_following.rst:15
msgid "**Step 1 Assembly**"
msgstr ""

#: ../line_following.rst:17
msgid "Connect the light follower to the Sensor Connector with **M3*10 screws** and **M3 nuts**, and then assemble them to the car with two **M3*10 screws** and two **M3 nuts**. You're suggested to hold the nuts underneath with your fingers."
msgstr ""

#: ../line_following.rst:25
msgid "**Step 2 Wiring**"
msgstr ""

#: ../line_following.rst:27
msgid "Connect the light follower to the Robot HATS with a 5-pin anti-reverse cable as shown below."
msgstr ""

#: ../line_following.rst:32
msgid "**Step 3 Test**"
msgstr ""

#: ../line_following.rst:34
msgid "Get into the directory example:"
msgstr ""

#: ../line_following.rst:40
msgid "Check whether any i2c device is recognized or not via i2c-tools"
msgstr ""

#: ../line_following.rst:49
msgid "We can see 11 is the line follower’s i2c address. If it is not shown, it proves your wiring is not correct and the i2c communication with Raspberry Pi fails too. You need to check the wiring before the next step."
msgstr ""

#: ../line_following.rst:54
msgid "Run the test code."
msgstr ""

#: ../line_following.rst:64
msgid "For the better working of line following module, we should adjust its sensitivity. The steps are as follows:"
msgstr ""

#: ../line_following.rst:67
msgid "Place the module on the white surface, read the value ; place it on balck surface, and read value."
msgstr ""

#: ../line_following.rst:70
msgid "Calculate the difference, rotate potentiometer on the line following module toward the clockwise and anticlockwise till the diffence reaches up to the maximum. Now the debugging is finished."
msgstr ""

#: ../line_following.rst:74
msgid "**Step 4 Starts Running!**"
msgstr ""

#: ../line_following.rst:76
msgid "Run the line follower code"
msgstr ""

#: ../line_following.rst:82
msgid "A prompt of calibration will be printed on the screen when the program starts to run. We will calibrate the module on a white surface first: place all the five probes of the line follower above a white board. The prompt of completed calibration will be printed on the screen a few seconds later. Then let’s move on to calibration on black line. Also the prompt of starting is printed on the screen, and then place all the probes above the black lines. And the prompt of calibration completed will be printed on the screen a few seconds later."
msgstr ""

#: ../line_following.rst:91
msgid "When the module calibration is all completed, we can run the car then. Place the PiCar-S with probes above the black line on the white board, and then it will go forward following the line itself."
msgstr ""

#: ../line_following.rst:96
msgid "How to make a track for line following"
msgstr ""

#: ../line_following.rst:98
msgid "To make a track for the car to follow a black line, you need to prepare the following materials:"
msgstr ""

#: ../line_following.rst:101
msgid "A large sheet of paper, a roll of black tape (as black lines), a hard card board (the size depending on the size of the track) or a flat surface like the floor or desk."
msgstr ""

#: ../line_following.rst:105
msgid "1. Spread the paper out smoothly on the hard board, and paste on the board or flat surface."
msgstr ""

#: ../line_following.rst:108
msgid "Paste the tape on the paper."
msgstr ""

#: ../line_following.rst:110
msgid "Rules for making:"
msgstr ""

#: ../line_following.rst:114
msgid "Width of the black line: about 18-30mm, nearly the distance between"
msgstr ""

#: ../line_following.rst:113
msgid "two probes, no more than the minimum distance of two nonadjacent probes"
msgstr ""

#: ../line_following.rst:118
msgid "The gap between two lines: more than 125mm, which is the width of the"
msgstr ""

#: ../line_following.rst:117
msgid "whole module, to prevent the car from getting confused when detecting two lines at the same time."
msgstr ""

#: ../line_following.rst:125
msgid "The semidiameter of curves: more than 138mm. When the front wheels"
msgstr ""

#: ../line_following.rst:121
msgid "turn left or right 45 degrees, the semidiameter of the path by which the car turns is equal to the wheelbase (the distance between the center of the front wheels and rear wheels). The car won't be able to turn and pass the curve smoothly if the semidiameter of the curve is too small."
msgstr ""

#: ../line_following.rst:127
msgid "A track sample is shown as below (the original map file can be found under folder **map** in **github**):"
msgstr ""

#: ../line_following.rst:134
msgid "Code Explanation of line_follower.py"
msgstr ""

#: ../line_following.rst:136
msgid "**Whole Work Flow**"
msgstr ""

#: ../line_following.rst:138
msgid "Considering the interference of negative environment factors, we need to calibrate the line follower sensor before actual use."
msgstr ""

#: ../line_following.rst:144
msgid "Here two main functions including the line follower calibration and line following are included in the main program."
msgstr ""

#: ../line_following.rst:147
msgid "**Subflow of Line Follower Calibration Function**"
msgstr ""

#: ../line_following.rst:149
msgid "When we run the line follower configuration, we will start from white color, then black color, which is more like the upper limit and lower limit of the sensor. Then we take the average value of black and white as reference value: if the detected value is higher than the reference, it should be white; if the detected is lower than the reference, it should be black. We will show the five detectors’ status by 5 elements [0,0,0,0,0]."
msgstr ""

#: ../line_following.rst:160
msgid "**Subflow of Line Following Function**"
msgstr ""

#: ../line_following.rst:165
msgid "In the line following function, we set the turning angle of the servo in different levels according to the detection results of the probes. If the line in front of the car is detected as a small curve, then the car will turn a small angle; if it is a big one, the car will turn a large angle. Thus, here we set four angle-turning constants: a_step, b_step, c_step, and d_step."
msgstr ""

#: ../line_following.rst:175
msgid "When the car moves forward originally, the servo is in 90 degrees. To drive the car to turn left, the servo should be in 90+step degrees; to turn right, the servo should be in 90-step degrees."
msgstr ""

#: ../line_following.rst:179
msgid "There is a special case: if the car runs off the track, and all the probes cannot detect the black lines any more, then it will continue the program below."
msgstr ""

#: ../line_following.rst:186
msgid "In some case, especially when the car turns in a direction when the semi diameter of the curve is very small (1), the car may run out of the track and cannot detect any black line (2). If there is no response program in such case, the car will be unable to follow the line again. Thus we set the response program to let the car move backwards in the opposite direction (3), and then turn back to the original direction until a black line is detected again and move forward (4)."
msgstr ""

#: ../line_following.rst:194
msgid "**Functions Explanation**"
msgstr ""

#: ../line_following.rst:196
msgid "The logic of the code is just as shown in the flow chart above."
msgstr ""

#: ../line_following.rst:198
msgid "Three Python modules are used in the code, including the imported **SunFounder_Line_Follower**, **front_wheels**, and **back_wheels**. They are the drivers for this kit, respectively for line following , front wheels, and rear wheels"
msgstr ""

#: ../line_following.rst:203
msgid "The related classes have been defined here. When the modules are applied to use, objects will be created for related classes, and different parts of hardware will be driven by calling a function by the class object."
msgstr ""

#: ../line_following.rst:207
msgid "Similar to the line following module, we create an object named **lf**:"
msgstr ""

#: ../line_following.rst:209
msgid "**lf = Line_Follower_module.Line_Follower(references=REFERENCES)**"
msgstr ""

#: ../line_following.rst:211
msgid "The parameter is initial, and then we can apply the function by calling a class object."
msgstr ""

#: ../line_following.rst:214
msgid "**lf.read_digital()**"
msgstr ""

#: ../line_following.rst:216
msgid "This function is used to read the analog signal of all probes, and convert it into digital signal. If the signal is larger than the reference, the corresponding parameter will be 0; if it is lower than the reference, the parameter will be 1. There are five probes, thus we will get a 5-parameter list."
msgstr ""

#: ../line_following.rst:222
msgid "**fw.turn(turning_angle)**"
msgstr ""

#: ../line_following.rst:224
msgid "The function for front wheels' turning. The main program will call this function if applying the front wheels for turning. The parameter is the turning angle."
msgstr ""

#: ../line_following.rst:228
msgid "**bw.forward()**"
msgstr ""

#: ../line_following.rst:230
msgid "**bw.set_speed(forward_speed)**"
msgstr ""

#: ../line_following.rst:232
msgid "Here we need two functions for rear wheels. One is to control the rotating direction as forward (for rotating backwards, **bw.backward()**). The second one is to set the rotating speed; the parameter is the speed value (range 0~100). The bigger the parameter is, the faster the wheel rotates."
msgstr ""
