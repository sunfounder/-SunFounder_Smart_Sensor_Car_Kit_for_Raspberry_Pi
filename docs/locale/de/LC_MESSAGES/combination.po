# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder_PiCar-S
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder_PiCar-S \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 10:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../combination.rst:2
msgid "Combination"
msgstr ""

#: ../combination.rst:4
msgid ""
"So, this smart car now is smart in three separate features. But, you "
"think only one sensor module is not enough? Try to combine those sensor "
"modules in one! Here we can show you an experiment - light following with"
" obstacle avoidance for reference."
msgstr ""

#: ../combination.rst:9
msgid ""
"When the car runs with the light follower, sometimes it may crash into "
"obstacles when following the light, and it’s not quite convenient to let "
"the car move back (though we've set the car to move backward if the array"
" is [1,0,1], it’s hard to acquire these values since the the car is "
"moving and the light cannot be exactly as required sometimes). So we "
"consider Also, you can let the car move backwards by a paper board or "
"your foot, which is quite easy."
msgstr ""

#: ../combination.rst:17
msgid "Check below the program of this example."
msgstr ""

#: ../combination.rst:19
msgid ""
"Assemble the light follower module and ultrasonic obstacle avoidance "
"module on the car first."
msgstr ""

#: ../combination.rst:22
msgid ""
"Log into the Raspberry Pi on your computer via ssh, and get into the "
"directory"
msgstr ""

#: ../combination.rst:29
msgid "Run the code."
msgstr ""

#: ../combination.rst:36
msgid "How it works"
msgstr ""

#: ../combination.rst:38
msgid ""
"Set the obstacle avoidance as a superior priority than light following: "
"if there is an obstacle in front of the car, it walk away from the "
"obstacle and back to the track; if not, then the car will keep follow "
"light."
msgstr ""

#: ../combination.rst:43
msgid ""
"Since the light following and obstacle avoidance of the car depend on the"
" sensor modules, we set two functions to read the status of two sensors "
"separately, and assign values to flags to be returned from the functions:"
" **state_light()**, and **state_sonic()**."
msgstr ""

#: ../combination.rst:48
msgid "In the function **state_sonic()**, the return value is **avoid_flag**."
msgstr ""

#: ../combination.rst:50
msgid "If the car is **close to** an obstacle, it will return **avoid_flag =2**;"
msgstr ""

#: ../combination.rst:52
msgid "if it is **too close to** the obstacle, it will return **avoid_flag =1**;"
msgstr ""

#: ../combination.rst:54
msgid ""
"if ahead **no obstacle** is detected near, it will return **avoid_flag "
"=0**."
msgstr ""

#: ../combination.rst:56
msgid "In the function **state_light()**, the return value is **light_flag**."
msgstr ""

#: ../combination.rst:58
msgid ""
"If the light spot is **in front of** the car, it will return **light_flag"
" = 0**;"
msgstr ""

#: ../combination.rst:60
msgid "if the spot is **at the right side**, it will return **light_flag = 1**;"
msgstr ""

#: ../combination.rst:62
msgid "if the spot is **at the left side**, it will return **light_flag = 2**;"
msgstr ""

#: ../combination.rst:64
msgid "if the spot is **at the back**, it will return **light_flag = 3**;"
msgstr ""

#: ../combination.rst:66
msgid "if **no light spot** is detected, it will return **light_flag = 4**."
msgstr ""

#: ../combination.rst:68
msgid ""
"The main program **main()** will run the corresponding program according "
"to **avoid_flag** and **light_flag**, and the **avoid_flag** is superior "
"in priority."
msgstr ""

